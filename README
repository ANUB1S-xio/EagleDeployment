The developed code follows the general principles from your initial project documents, 
but it requires more alignment to fit with the specific requirements in the diagrams and 
specifications:

    Sequence and Use Case Diagrams:

        - The code reflects the basic workflow from the Eagle Deployment Sequence Diagram: it allows 
          a user to initiate commands, checks for necessary parameters, and processes commands from 
          a playbook.yaml file. The -e and -l options allow task execution and YAML file listing, 
          similar to initiating tasks and managing inventories in the diagram.

        - The Eagle Deployment Use Case Diagram mentions components like inventory, modules, and plugins. 
          Currently, we only handle playbooks and hosts. Adding modules and plugins could align the tool 
          more with the diagram's vision, allowing for specialized tasks or extensions.

    Preliminary Design Specification:

        - The design document outlines a goal of building a tool that is both scalable and performant, 
          similar to Ansible but optimized for concurrency (Go’s main advantage over Python). While our 
          tool currently runs locally, adding concurrency for parallel host connections would bring it 
          closer to the specification.

        - The document mentions using a stateful and stateless approach. The current implementation is 
          essentially stateless, as it doesn’t persist state across runs. Adding a stateful component, 
          perhaps with task tracking or rollback capabilities, would align more closely with the goals outlined.

    State Diagram (Replace Ansible State Diagram):

        - The Replace Ansible State Diagram suggests both StatefulEagleDeployment and StatelessEagleDeployment 
          classes. The current implementation is more like StatelessEagleDeployment, with no persistent state 
          between executions.

        - We could introduce a state-tracking feature that records task completion and errors, which would 
          allow for resuming or rolling back on failures. This could be done by writing to a log or database 
          (e.g., SQLite) to track state across runs.

    Class Diagram (State Diagram Cap):

        - The Class Diagram (State Diagram Cap) outlines a command framework with error handling, command 
          parsing, and output display. The current code partially aligns with this, using basic error handling 
          and output for each task.

        - To better match this structure, we could refactor the code into distinct classes or modules: 
          CommandParser, ExecuteCommand, and ErrorHandling. This would enhance modularity and follow the 
          diagram’s structure more closely.

Next Steps to Improve Alignment:

Concurrency:

- Implement concurrent task execution across hosts. Go’s goroutines would allow us to deploy 
  tasks in parallel, improving scalability. This can be seen in the [`executor.ExecuteConcurrently`](executor/executor.go) function.

State Management:

- Introduce a stateful tracking system (e.g., SQLite) to record task status and allow for rollback 
  or retry in future executions.

Class-based Refactoring:

- Refactor the tool into components resembling CommandParser, ExecuteCommand, and ErrorHandling. 
  This would give the structure more modularity, allowing future expansion for additional commands 
  and error-handling strategies.

Plugins and Modules:

- Implement a plugin system that lets users extend functionality by adding custom modules. This 
  could allow for tailored tasks like package installation, service management, or monitoring as 
  outlined in the use case diagram.

# Instructions on How to Use the Program

## Project Structure

### Main Components

- [`main.go`](main.go): The main entry point for the EagleDeploy CLI, handling menu navigation and execution of YAML playbooks.
- [`config/config.go`](config/config.go): Contains the `LoadConfig` function to load YAML configuration files.
- [`executor/executor.go`](executor/executor.go): Contains functions to execute tasks locally and remotely, including concurrent execution.
- [`sshutils/sshutils.go`](sshutils/sshutils.go): Provides utility functions for SSH connections and command execution.
- [`tasks/tasks.go`](tasks/tasks.go): Defines the structure and loading functionality for playbooks and tasks.

### Key Functions

- `main()`: The main entry point for the EagleDeploy CLI, handling menu navigation and user actions.
- `executeYAML(playbookPath string, targetHosts []string)`: Executes tasks defined in a YAML playbook on specified target hosts using concurrency.
- `listPlaybooks()`: Lists all YAML playbooks in the 'playbooks' directory.
- `ConnectSSH(host, user, password string, port int)`: Establishes an SSH connection to a remote server.
- `RunSSHCommand(client *ssh.Client, command string)`: Executes a command on a remote host via SSH.
- `RunLocalCommand(command string)`: Executes a shell command locally.
- `LoadConfig(filePath string, target interface{})`: Loads a YAML configuration file and unmarshals it into a given Go structure.
- `ExecuteConcurrently(taskList []tasks.Task, hosts []string, port int)`: Executes tasks concurrently across multiple hosts.

## Running the Program

### Building the Application

1. Ensure you have Go installed. Verify the installation by running:
    ```sh
    go version
    ```

2. Navigate to the project directory:
    ```sh
    cd /path/to/your/EagleDeploy
    ```

3. Build the application:
    ```sh
    go build main.go
    ```

### Running the Application

1. Run the executable:
    ```sh
    ./main    # On Linux/macOS
    main.exe  # On Windows
    ```

2. Follow the interactive menu to execute playbooks, list YAML files, manage inventory, enable/disable logging, rollback changes, or show help.

This structure ensures that the EagleDeploy CLI is modular, scalable, and easy to extend with additional functionality.